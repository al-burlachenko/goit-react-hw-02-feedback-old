{"version":3,"sources":["components/Statistics/Statistics.styled.js","components/Statistics/Statistics.jsx","components/FeedbackOptions/FeedbackOption.styled.js","components/FeedbackOptions/FeedbackOptions.jsx","components/Section/Section.styled.js","components/Section/Section.jsx","components/Notification/Notification.styled.js","components/Notification/Notification.jsx","components/App/App.jsx","index.js"],"names":["StatisticsList","styled","ul","StatisticsItem","li","Statistics","this","props","good","neutral","bad","total","positivePercentage","Component","ButtonItem","button","Buttons","div","FeedbackOptions","options","onLeaveFeedback","map","option","type","onClick","toUpperCase","split","slice","join","SectionWrapper","section","Title","h2","Section","title","children","Message","p","Notification","message","App","state","value","setState","prevState","countTotalFeedback","countPositiveFeedbackPercentage","Object","keys","Boolean","propTypes","PropTypes","string","arrayOf","func","number","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.728555d4.chunk.js","sourcesContent":["import styled from \"@emotion/styled\";\n\nexport const StatisticsList = styled.ul`\n  margin: 0;\n  padding: 0;\n\n  display: flex;\n  flex-direction: column;\n`;\nexport const StatisticsItem = styled.li`\n  margin: 0;\n  padding: 0;\n  list-style-type: none;\n`;\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport { StatisticsItem, StatisticsList } from \"./Statistics.styled\";\n\nclass Statistics extends Component {\n  render() {\n    const { good, neutral, bad, total, positivePercentage } = this.props;\n\n    return (\n      <StatisticsList>\n        <StatisticsItem>Good: {good}</StatisticsItem>\n        <StatisticsItem>Neutral: {neutral}</StatisticsItem>\n        <StatisticsItem>Bad: {bad}</StatisticsItem>\n        <StatisticsItem>Total: {total}</StatisticsItem>\n        <StatisticsItem>\n          Positive feedback: {positivePercentage}%\n        </StatisticsItem>\n      </StatisticsList>\n    );\n  }\n}\n\nexport default Statistics;\n\nStatistics.propTypes = {\n  good: PropTypes.number,\n  neutral: PropTypes.number,\n  bad: PropTypes.number,\n  total: PropTypes.number,\n  positivePercentage: PropTypes.number,\n};\n","import styled from \"@emotion/styled\";\n\nexport const ButtonItem = styled.button`\n  background-color: transparent;\n  border: 2px solid #000;\n  border-radius: 0.6em;\n\n  display: flex;\n  justify-content: space-between;\n  padding: 1.2em 2.8em;\n  margin-left: 6px;\n\n  cursor: pointer;\n  font-size: 1rem;\n  font-weight: 400;\n  line-height: 1;\n  text-decoration: none;\n  text-align: center;\n  // text-transform: capitalize;\n\n  transition: box-shadow 600ms ease-in-out, color 300ms ease-in-out;\n\n  &:hover {\n    box-shadow: 0 0 40px 40px #222 inset;\n    color: #fff;\n  }\n\n  &:first-of-type {\n    margin-left: 0px;\n  }\n`;\n\nexport const Buttons = styled.div`\n  display: flex;\n`;\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport { Buttons, ButtonItem } from \"./FeedbackOption.styled\";\n\nclass FeedbackOptions extends Component {\n  render() {\n    const { options, onLeaveFeedback } = this.props;\n    return (\n      <Buttons>\n        {options.map((option) => (\n          <ButtonItem\n            type=\"button\"\n            onClick={() => onLeaveFeedback(option)}\n            key={option}\n          >\n            {option.toUpperCase().split(\"\").slice(0, 1) +\n              option.split(\"\").slice(1).join(\"\")}\n            {/* используются методы обработки массивов вместо text-transform:capitalize в css без особых причин*/}\n          </ButtonItem>\n        ))}\n      </Buttons>\n    );\n  }\n}\n\nexport default FeedbackOptions;\n\nFeedbackOptions.propTypes = {\n  options: PropTypes.arrayOf(PropTypes.string),\n  onLeaveFeedback: PropTypes.func,\n};\n","import styled from \"@emotion/styled\";\n\nexport const SectionWrapper = styled.section`\n  width: 500px;\n`;\nexport const Title = styled.h2`\n  // display: flex;\n  // justify-content: center;\n`;\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport { SectionWrapper, Title } from \"./Section.styled\";\n\nclass Section extends Component {\n  render() {\n    const { title, children } = this.props;\n    return (\n      <SectionWrapper>\n        <Title>{title}</Title>\n        {children}\n      </SectionWrapper>\n    );\n  }\n}\n\nexport default Section;\n\nSection.propTypes = { title: PropTypes.string, children: PropTypes.node };\n","import styled from \"@emotion/styled\";\n\nexport const Message = styled.p`\n  font-size: 1.5em;\n`;\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport { Message } from \"./Notification.styled\";\n\nclass Notification extends Component {\n  render() {\n    const { message } = this.props;\n    return <Message>{message}</Message>;\n  }\n}\n\nexport default Notification;\n\nNotification.propTypes = {\n  message: PropTypes.string,\n};\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport Statistics from \"../Statistics\";\nimport FeedbackOptions from \"../FeedbackOptions\";\nimport Section from \"../Section\";\nimport Notification from \"../Notification\";\n\nclass App extends Component {\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0,\n  };\n\n  onLeaveFeedback = (value) => {\n    this.setState((prevState) => {\n      return { [value]: prevState[value] + 1 };\n    });\n  };\n\n  countTotalFeedback(good, neutral, bad) {\n    return good + neutral + bad;\n  }\n\n  countPositiveFeedbackPercentage(good, neutral, bad) {\n    return good === 0 ? 0 : (good / (neutral + bad + good)) * 100;\n  }\n\n  render() {\n    const { good, neutral, bad } = this.state;\n    const total = this.countTotalFeedback(good, neutral, bad);\n    const positivePercentage = this.countPositiveFeedbackPercentage(\n      good,\n      neutral,\n      bad\n    );\n\n    return (\n      <>\n        <Section title=\"Please leave feedback\">\n          <FeedbackOptions\n            options={Object.keys(this.state)}\n            onLeaveFeedback={this.onLeaveFeedback}\n          />\n        </Section>\n\n        <Section title=\"Statistics\">\n          {Boolean(total) && (\n            <Statistics\n              good={good}\n              neutral={neutral}\n              bad={bad}\n              total={total}\n              positivePercentage={positivePercentage}\n            />\n          )}\n          {!total && <Notification message=\"There is no feedback\" />}\n        </Section>\n      </>\n    );\n  }\n}\n\nexport default App;\n\nSection.propTypes = { title: PropTypes.string };\n\nFeedbackOptions.propTypes = {\n  options: PropTypes.arrayOf(PropTypes.string),\n  onLeaveFeedback: PropTypes.func,\n};\n\nStatistics.propTypes = {\n  good: PropTypes.number,\n  neutral: PropTypes.number,\n  bad: PropTypes.number,\n  total: PropTypes.number,\n  positivePercentage: PropTypes.number,\n};\n\nNotification.propTypes = {\n  message: PropTypes.string,\n};\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}